<?xml version="1.0" encoding="UTF-8"?>
<!-- The [servlet-name]-servlet.xml file will be used to create
 the beans defined, overriding the definitions of any beans
 defined with the same name in the global scope. -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- Example Bean --> <!--
    'id'                -   This attribute specifies the bean identifier uniquely. In XML-based configuration metadata,
                            you use the id and/or name attributes to specify the bean identifier(s).

    'class'             -   This attribute is mandatory and specify the bean class to be used to create the bean.

    'scope'             -   singleton       - (default) single instance per Spring container
                            prototype       - have any number instances
                            request         - scopes to an HTTP request
                            session         - scopes to an HTTP session
                            global-session  - scopes to an HTTP global session

    'constructor-arg'   -

    'properties'        -

    'autowire' mode     -

    'lazy-init'         -

    'init-method'       -   A callback to be called just after all necessary properties on the bean have been set by the container.

    'destroy-method'    -   A callback to be used when the container containing the bean is destroyed.
    -->
    <bean id="beanExample"
          class="com.marcus.chiu.example.BeanExample"
          scope="singleton"
          init-method="initMethod"
          destroy-method="destroyMethod">
        <constructor-arg ref="smallBeanExample1"/>
        <constructor-arg ref="smallBeanExample2"/>
        <property name="name" value="David"/>
        <property name="randomNumber" value="0"/>
    </bean>

    <bean id="smallBeanExample1" class="com.marcus.chiu.example.SmallBeanExample_1" scope="singleton"></bean>
    <bean id="smallBeanExample2" class="com.marcus.chiu.example.SmallBeanExample_2" scope="singleton"></bean>
    <bean class="com.marcus.chiu.example.SmallBeanExample_3" scope="singleton"></bean>
    <bean class="com.marcus.chiu.example.SmallBeanExample_4" scope="singleton"></bean>
    <bean class="com.marcus.chiu.example.SmallBeanExample_5" scope="singleton"></bean>

    <bean id="bean a" class="com.marcus.chiu.example.SmallBeanExample_7"></bean>
    <bean id="bean b" class="com.marcus.chiu.example.SmallBeanExample_7"></bean>

    <!-- database mysql database credentials -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/Justin" />
        <property name="username" value="root" />
        <property name="password" value="password" />
    </bean>

    <bean id="userDaoJdbc" class="com.marcus.chiu.database.UserDaoJdbc" init-method="initMethod">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- The <context:component-scan...> tag will be use to activate
    Spring MVC annotation scanning capability which allows to make use
    of annotations like @Controller and @RequestMapping etc. -->
    <!-- Java Annotation is @ComponentScan({ "com.example" })-->
    <!-- path to controller folder -->
    <context:component-scan base-package="com.marcus.chiu.web.controller"></context:component-scan>

    <!-- Enables the Spring MVC @Controller, @Service, @Component programming model -->
    <mvc:annotation-driven />

    <!-- InternalResourceViewResolver have rules to resolve view names
    as defined, a logical view named 'hello' is delegated to a view implementation
    located at /WEB-INF/jsp/hello.jsp-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- Handling exceptions and corresponding views -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- specified 'ExceptionPage.jsp' as an exception view when SpringException occurs -->
                <prop key="com.marcus.chiu.web.SpringException">ExceptionPage</prop>
            </props>
        </property>
        <!-- all other errors are defaulted to 'error.jsp' view -->
        <property name="defaultErrorView" value="error"/>
    </bean>

    <!-- this tag is used to map static pages -->
    <mvc:resources mapping="pages/**" location="/WEB-INF/pages/" />

</beans>